"""flower-experiments: A Flower / PyTorch app."""
from pathlib import Path
import torch

from flwr.client import ClientApp, Client
from flwr.common import Context
from flwr_datasets.partitioner import IidPartitioner, DirichletPartitioner, ShardPartitioner

from fedlearn.model import SmallCNN
from fedlearn.data_loader import load_datasets
from fedlearn.client import ScaffoldClient, FlowerClient


def client_fn(context: Context) -> Client:

    # get data generated by the server to specify the client from "node_config"
    partition_id = context.node_config["partition-id"]
    num_partitions = context.node_config["num-partitions"]


    # get batch size and partition_method from "run_config"
    batch_size = context.run_config["batch-size"]
    partition_method = context.run_config["partition-method"]
    
    partitioner_kwargs = {
        "num_partitions": num_partitions,
    }

    if partition_method == "dirichlet":
        partitioner_kwargs["alpha"] = context.run_config["dirichlet-alpha"]
        partitioner_kwargs["partition_by"] = "label"
    elif partition_method == "shard":
        partitioner_kwargs["num_shards_per_partition"] = context.run_config["num-shards-per-partition"]
        partitioner_kwargs["partition_by"] = "label"


    # Get cache_dir from run_config, default to "data" in the parent directory
    cache_dir = context.run_config["cache-dir"]

    # load client specific dataloaders
    trainloader, valloader, _ = load_datasets(
        partition_id=partition_id, 
        partition_method=partition_method,
        partitioner_kwargs=partitioner_kwargs,
        batch_size=batch_size,
        cache_dir=cache_dir,
        )

    net = SmallCNN()
    criterion = torch.nn.CrossEntropyLoss()

    num_epochs = context.run_config["local-epochs"]
    lr = context.run_config["learning-rate"]
    momentum = context.run_config.get("momentum", 0.0)
    weight_decay = context.run_config.get("weight-decay", 0.0)
    method = context.run_config.get("method", "fedavg")
    
    if method.lower() == "fedavg":
        return FlowerClient(
            partition_id=partition_id,
            net=net,
            trainloader=trainloader,
            valloader=valloader,
            criterion=criterion,
            num_epochs=num_epochs,
            lr=lr,
            momentum=momentum,
            weight_decay=weight_decay,
        ).to_client()
    
    elif method.lower() == "scaffold":
        return ScaffoldClient(
            partition_id=partition_id,
            net=net,
            trainloader=trainloader,
            valloader=valloader,
            criterion=criterion,
            num_epochs=num_epochs,
            lr=lr,
            momentum=momentum,
            weight_decay=weight_decay,
            save_dir="client_cvs"
        ).to_client()


app = ClientApp(client_fn=client_fn)